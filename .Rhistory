# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# calculating Rescue probability
rescue_prob <- rescue_count / total_runs
# Mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
print(rescue_prob)
# set some Parameters to fixed Values
init_wd <- 3000
init_wb <- 30
init_sd <- 3000
init_sb <- 30
m_rate_wm <- 0.3
m_rate_sm <- 0.3
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 10
# set Parameters to vary
s_values_wm <- c(0.05,0.1,0.15)
s_values_sm <- c(0.2,0.25,0.3)
m_values_wm <- c(0.001,0.01,0.05)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-0
total_runs<-0
rescue_count<-0
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.02,m_rate_sm=0.02, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
if (total_end > 0) {
rescue_count <- rescue_count + 1
}
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_talbe_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(mval_wm=0.02,mval_sm=0.02,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# calculating Rescue probability
rescue_prob <- rescue_count / total_runs
# Mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
print(rescue_prob)
# set some Parameters to fixed Values
init_wd <- 3000
init_wb <- 30
init_sd <- 3000
init_sb <- 30
m_rate_wm <- 0.3
m_rate_sm <- 0.3
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 10
# set Parameters to vary
s_values_wm <- c(0.05,0.1,0.15)
s_values_sm <- c(0.2,0.25,0.3)
m_values_wm <- c(0.001,0.01,0.05)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-0
total_runs<-0
rescue_count<-0
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.02,m_rate_sm=0.02, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
if (total_end > 0) {
rescue_count <- rescue_count + 1
}
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_talbe_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(m_rate_wm=0.02,m_rate_sm=0.02,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# calculating Rescue probability
rescue_prob <- rescue_count / total_runs
# Mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
print(rescue_prob)
wd<- data_table_wd
View(wd)
View(wd)
# Function for simulating one Generation in the Population
simulate_one_gen <- function(N_wd, N_wb, N_sd, N_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm) {
# draw Offspring according to Poisson Distribution
offsp_wd <- rpois(1, N_wd * (1-decay_rate_wm-s_wm))
offsp_wb <- rpois(1, N_wb * (1-decay_rate_wm+s_wm))
offsp_sd <- rpois(1, N_sd * (1-decay_rate_sm-s_sm))
offsp_sb <- rpois(1, N_sb * (1-decay_rate_sm+s_sm))
# draw changing Mutants according to Poisson Distribution
mut_wd_to_wb <- rpois(1, offsp_wd * m_rate_wm)
mut_sd_to_sb <- rpois(1, offsp_sd * m_rate_sm)
mut_wb_to_wd <- rpois(1, offsp_wb * m_rate_wm)
mut_sb_to_sd <- rpois(1, offsp_sb * m_rate_sm)
# determine new Population Sizes of all four Mutants (2 versions of weak Mutations   and 2   versions of strong Mutations)
N_wd_new <- max(offsp_wd - mut_wd_to_wb+ mut_wb_to_wd,0)
N_wb_new <- max(offsp_wb - mut_wb_to_wd+ mut_wd_to_wb,0)
N_sd_new <- max(offsp_sd - mut_sd_to_sb+ mut_sb_to_sd,0)
N_sb_new <- max(offsp_sb - mut_sb_to_sd+ mut_sd_to_sb,0)
return(c(N_wd_new, N_wb_new, N_sd_new, N_sb_new))
}
# Test the Function
print(simulate_one_gen(N_wd=50, N_wb=0, N_sd=50, N_sb=0, decay_rate_wm=0, decay_rate_sm=0, s_wm=0, s_sm=0, m_rate_wm=0, m_rate_sm=0))
# Simulation runs until the 100th Generation
max_gen=100
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the Vector in which to save the Results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the Simulation until Generation max_gen
for (i in 1:(max_gen + 1)) {
# redefine the current Population one Generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new Population Sizes to the Output Vector
pop_vector <- rbind(pop_vector,pop_new)
# Condition to stop the Simulation before max_gen: either the Population exceeds 1.5         Times the Original Population Size, or it goes extinct
if ((sum(pop_new) >= 40 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# Define the Row and Column Names of the Output Vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # Note that the Vector has to be cut if the Simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the Result
return(pop_vector)
}
# Test the Function and plot the Result
# set max_gen to a Value to be used througout
max_gen <- 100
# create your Simulation Data
output <- simulate_pop(init_wd=500, init_wb=500,  init_sd=500, init_sb=500, decay_rate_wm=0.1, decay_rate_sm=0.2, s_wm=0.2, s_sm=0.3, m_rate_wm=0.01, m_rate_sm=0.04,max_gen)
# show the last few Lines of the Data Table
print(tail(output))
# plot the Output - note that the Plot Range and the x Axis have to be adjusted based on the Length of the Table
# determine x axis Range
x_range <- 0:(length(output[,1])-1)
# this plots the total Population Size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add Number of wd Individuals
lines(x_range,output[,1], col="blue")
# add Number of wb Individuals
lines(x_range,output[,2], col="navyblue")
# add Number of sd Individuals
lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# set some Parameters to fixed Values
init_wd <- 3000
init_wb <- 30
init_sd <- 3000
init_sb <- 30
m_rate_wm <- 0.3
m_rate_sm <- 0.3
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 10
# set Parameters to vary
s_values_wm <- c(0.05,0.1,0.15)
s_values_sm <- c(0.2,0.25,0.3)
m_values_wm <- c(0.001,0.01,0.05)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-0
total_runs<-0
rescue_count<-0
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.02,m_rate_sm=0.02, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
if (total_end > 0) {
rescue_count <- rescue_count + 1
}
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_table_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(m_rate_wm=0.02,m_rate_sm=0.02,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# calculating Rescue probability
rescue_prob <- rescue_count / total_runs
# Mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
print(rescue_prob)
wd<- data_table_wd
View(wd)
View(wd)
#}
#}# Nur die Zeilen mit V1 = 0.15 auswählen
data_s015 <- subset(data_table_wd, V1 == 0.15)
#}
#}# Nur die Zeilen mit V1 = 0.15 auswählen
data_s015 <- subset(data_table_wd, V1 == 0.15)
#}
#}# Nur die Zeilen mit V1 = 0.15 auswählen
data_s015 <- subset(wd, V1 == 0.15)
#}
#}
library(ggplot2)
ggplot(data_table_wd, aes(x = 1:nrow(data_table_wd), y = V2, color = factor(V1))) +
geom_line() +
geom_point(size = 1) +
labs(
x = "Index / Generation",
y = "Frequency (V2)",
color = "Selection Coefficient (V1)",
title = "Frequency vs Index for Different Selection Coefficients"
) +
theme_minimal()
#}
#}
# Make sure your data is a proper data frame
data_table_wd <- as.data.frame(data_table_wd)
# If the column names are missing or wrong, set them
colnames(data_table_wd) <- c("V1", "V2")
# Add an index column for plotting along x-axis
data_table_wd$Index <- 1:nrow(data_table_wd)
# Now use ggplot2
library(ggplot2)
ggplot(data_table_wd, aes(x = Index, y = V2, color = factor(V1))) +
geom_line() +
geom_point(size = 1) +
labs(
x = "Index / Generation",
y = "Frequency (V2)",
color = "Selection Coefficient (V1)",
title = "Frequency vs Index for Different Selection Coefficients"
) +
theme_minimal()
library(ggplot2)
# Sicherstellen, dass es ein Data Frame ist
data_table_wd <- as.data.frame(data_table_wd)
colnames(data_table_wd) <- c("V1", "V2")
# Boxplot erstellen
ggplot(data_table_wd, aes(x = factor(V1), y = V2, fill = factor(V1))) +
geom_boxplot() +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
fill = "Selektionskoeffizient",
title = "Verteilung der Frequenzen für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
library(ggplot2)
# Sicherstellen, dass es ein Data Frame ist
data_table_sb <- as.data.frame(data_table_sb)
colnames(data_table_sb) <- c("V1", "V2")
# Boxplot erstellen
ggplot(data_table_sb, aes(x = factor(V1), y = V2, fill = factor(V1))) +
geom_boxplot() +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
fill = "Selektionskoeffizient",
title = "Verteilung der Frequenzen für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
library(ggplot2)
# Sicherstellen, dass es ein Data Frame ist
data_table_wb <- as.data.frame(data_table_wb)
colnames(data_table_wb) <- c("V1", "V2")
# Boxplot erstellen
ggplot(data_table_wb, aes(x = factor(V1), y = V2, fill = factor(V1))) +
geom_boxplot() +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
fill = "Selektionskoeffizient",
title = "Verteilung der Frequenzen für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
library(ggplot2)
# Sicherstellen, dass es ein Data Frame ist
data_table_sd <- as.data.frame(data_table_sd)
colnames(data_table_sd) <- c("V1", "V2")
# Boxplot erstellen
ggplot(data_table_sd, aes(x = factor(V1), y = V2, fill = factor(V1))) +
geom_boxplot() +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
fill = "Selektionskoeffizient",
title = "Verteilung der Frequenzen für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
# Sicherstellen, dass es ein Data Frame ist
data_table_wd <- as.data.frame(data_table_wd)
colnames(data_table_wd) <- c("V1", "V2")
# Scatterplot mit Jitter
ggplot(data_table_wd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
color = "Selektionskoeffizient",
title = "Scatterplot der Frequenzen für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
# Sicherstellen, dass es ein Data Frame ist
data_table_wd <- as.data.frame(data_table_wd)
colnames(data_table_wd) <- c("V1", "V2")
# Scatterplot mit Jitter und Mittelwert
ggplot(data_table_wd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
color = "Selektionskoeffizient",
title = "Scatterplot der Frequenzen mit Mittelwerten für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
data_table_sb <- as.data.frame(data_table_sb)
colnames(data_table_sb) <- c("V1", "V2")
# Scatterplot mit Jitter und Mittelwert
ggplot(data_table_sb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "Selektionskoeffizient (V1)",
y = "Frequenz (V2)",
color = "Selektionskoeffizient",
title = "Scatterplot der Frequenzen mit Mittelwerten für verschiedene Selektionskoeffizienten"
) +
theme_minimal()
