labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
init_wd <- 300
init_wb <- 50
init_sd <- 300
init_sb <- 50
m_rate_wm <- 0.01
m_rate_sm <- 0.05
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.2,0.205,0.210)
m_values_wm <- c(0.001,0.003,0.005)
m_values_sm <- c(0.006,0.008,0.010)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_sm = numeric(),
m_rate_sm = numeric(),
replicate = integer(),
rescued_sd = integer(),
rescued_sb = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_sm in m_values_sm){
for(sval_sm in s_values_sm){
for(rep in 1:no_replicates){
# Run your simulation
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_sm, s_wm, mval_sm, m_rate_wm, max_gen)
# Final population sizes for wm
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
# Determine rescue outcomes
rescued_sd <- as.integer(N_end_sd > 0)
rescued_sb <- as.integer(N_end_sb > 0)
# Append results
rescue_results <- rbind(rescue_results,
data.frame(
s_sm = sval_sm,
m_rate_sm = mval_sm,
replicate = rep,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
))
}
}
}
library(dplyr)
library(dplyr)
rescue_summary <- rescue_results %>%
group_by(s_sm, m_rate_sm) %>%
summarise(
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
library(tidyr)
library(tidyr)
rescue_long <- rescue_summary %>%
pivot_longer(cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob") %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant)
)
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong deleterious mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sb)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
init_wd <- 300
init_wb <- 100
init_sd <- 300
init_sb <- 100
m_rate_wm <- 0.01
m_rate_sm <- 0.05
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.2,0.205,0.210)
m_values_wm <- c(0.001,0.003,0.005)
m_values_sm <- c(0.006,0.008,0.010)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_sm = numeric(),
m_rate_sm = numeric(),
replicate = integer(),
rescued_sd = integer(),
rescued_sb = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_sm in m_values_sm){
for(sval_sm in s_values_sm){
for(rep in 1:no_replicates){
# Run your simulation
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_sm, s_wm, mval_sm, m_rate_wm, max_gen)
# Final population sizes for wm
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
# Determine rescue outcomes
rescued_sd <- as.integer(N_end_sd > 0)
rescued_sb <- as.integer(N_end_sb > 0)
# Append results
rescue_results <- rbind(rescue_results,
data.frame(
s_sm = sval_sm,
m_rate_sm = mval_sm,
replicate = rep,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
))
}
}
}
library(dplyr)
library(dplyr)
rescue_summary <- rescue_results %>%
group_by(s_sm, m_rate_sm) %>%
summarise(
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
library(tidyr)
library(tidyr)
rescue_long <- rescue_summary %>%
pivot_longer(cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob") %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant)
)
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong deleterious mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sb)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
init_wd <- 300
init_wb <- 200
init_sd <- 300
init_sb <- 200
m_rate_wm <- 0.01
m_rate_sm <- 0.05
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.2,0.205,0.210)
m_values_wm <- c(0.001,0.003,0.005)
m_values_sm <- c(0.006,0.008,0.010)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_sm = numeric(),
m_rate_sm = numeric(),
replicate = integer(),
rescued_sd = integer(),
rescued_sb = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_sm in m_values_sm){
for(sval_sm in s_values_sm){
for(rep in 1:no_replicates){
# Run your simulation
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_sm, s_wm, mval_sm, m_rate_wm, max_gen)
# Final population sizes for wm
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
# Determine rescue outcomes
rescued_sd <- as.integer(N_end_sd > 0)
rescued_sb <- as.integer(N_end_sb > 0)
# Append results
rescue_results <- rbind(rescue_results,
data.frame(
s_sm = sval_sm,
m_rate_sm = mval_sm,
replicate = rep,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
))
}
}
}
library(dplyr)
library(dplyr)
rescue_summary <- rescue_results %>%
group_by(s_sm, m_rate_sm) %>%
summarise(
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
library(tidyr)
library(tidyr)
rescue_long <- rescue_summary %>%
pivot_longer(cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob") %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant)
)
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong deleterious mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sb)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
init_wd <- 300
init_wb <- 100
init_sd <- 300
init_sb <- 100
m_rate_wm <- 0.01
m_rate_sm <- 0.05
decay_rate_wm <- 0.1
decay_rate_sm <- 0.25
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.2,0.205,0.210)
m_values_wm <- c(0.001,0.003,0.005)
m_values_sm <- c(0.006,0.008,0.010)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_sm = numeric(),
m_rate_sm = numeric(),
replicate = integer(),
rescued_sd = integer(),
rescued_sb = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_sm in m_values_sm){
for(sval_sm in s_values_sm){
for(rep in 1:no_replicates){
# Run your simulation
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_sm, s_wm, mval_sm, m_rate_wm, max_gen)
# Final population sizes for wm
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
# Determine rescue outcomes
rescued_sd <- as.integer(N_end_sd > 0)
rescued_sb <- as.integer(N_end_sb > 0)
# Append results
rescue_results <- rbind(rescue_results,
data.frame(
s_sm = sval_sm,
m_rate_sm = mval_sm,
replicate = rep,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
))
}
}
}
library(dplyr)
library(dplyr)
rescue_summary <- rescue_results %>%
group_by(s_sm, m_rate_sm) %>%
summarise(
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
library(tidyr)
library(tidyr)
rescue_long <- rescue_summary %>%
pivot_longer(cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob") %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant)
)
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong deleterious mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sb)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sb)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob sb") +
labs(title="Heatmap rescue probability of strong beneficial mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_sm), y=factor(m_rate_sm), fill=rescue_prob_sd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob sd") +
labs(title="Heatmap rescue probability of strong deleterious mutation",
x="selection coefficients strong mutation",
y="mutation rates strong mutation") +
theme_minimal()
ggplot(rescue_summary, aes(x=factor(s_wm), y=factor(m_rate_wm), fill=rescue_prob_wd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap of wd Rescue Probability",
x="s_wm", y="m_rate_wm") +
theme_minimal()
init_wd <- 300
init_wb <- 100
init_sd <- 300
init_sb <- 100
m_rate_wm <- 0.01
m_rate_sm <- 0.05
decay_rate_wm <- 0.2
decay_rate_sm <- 0.4
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.2,0.205,0.210)
m_values_wm <- c(0.001,0.003,0.005)
m_values_sm <- c(0.006,0.008,0.010)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_wm = numeric(),
m_rate_wm = numeric(),
replicate = integer(),
rescued_wd = integer(),
rescued_wb = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_wm in m_values_wm){
for(sval_wm in s_values_wm){
for(rep in 1:no_replicates){
# Run your simulation
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, s_sm, mval_wm, m_rate_sm, max_gen)
# Final population sizes for wm
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
# Determine rescue outcomes
rescued_wd <- as.integer(N_end_wd > 0)
rescued_wb <- as.integer(N_end_wb > 0)
# Append results
rescue_results <- rbind(rescue_results,
data.frame(
s_wm = sval_wm,
m_rate_wm = mval_wm,
replicate = rep,
rescued_wd = rescued_wd,
rescued_wb = rescued_wb
))
}
}
}
library(dplyr)
library(dplyr)
rescue_summary <- rescue_results %>%
group_by(s_wm, m_rate_wm) %>%
summarise(
rescue_prob_wd = mean(rescued_wd),
rescue_prob_wb = mean(rescued_wb),
.groups = "drop"
)
library(tidyr)
library(tidyr)
rescue_long <- rescue_summary %>%
pivot_longer(cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob") %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant)
)
ggplot(rescue_summary, aes(x=factor(s_wm), y=factor(m_rate_wm), fill=rescue_prob_wd)) +
geom_tile() +
scale_fill_gradientn(colors=c("blue","white","red"), name="Rescue Prob wd") +
labs(title="Heatmap of wd Rescue Probability",
x="s_wm", y="m_rate_wm") +
theme_minimal()
init_wd <- 300
init_wb <- 300
init_sd <- 300
init_sb <- 300
m_rate_wm <- 0.0005
m_rate_sm <- 0.0005
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.1
s_sm <- 0.2
max_gen <- 1000
replicates <- 10
max_gen <- 1000
# defining Data Frame to save one Row (Population Size for multiple Generations until max_gen) after one Loop
temp_output <- data.frame(array(NA, dim = c(0,max_gen)))
# defining Data Frame to save all Results from Loop
final_output <- data.frame(array(NA, dim = c(replicates,max_gen)))
# defining end_gen which is as long as the last Generation where the pop size is an actual Number and not NA yet
end_gen<-tail(which(!is.na(final_output[1,])), 1)
# Plot one Line / one Population
plot(x=1:end_gen,y=final_output[1,1:end_gen],type='l',ylim=c(0,max(final_output, na.rm = TRUE)),xlab =  "Generation",ylab = "Population size")
# Loop for plotting each Row of Data Table / Population as a Line in the Plot
for (i in 1:replicates) {
end_gen<-tail(which(!is.na(final_output[i,])), 1)
lines(x=1:end_gen,y=final_output[i,1:end_gen], col="#77b5fe")
}
