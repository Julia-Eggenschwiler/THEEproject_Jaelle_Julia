lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# Simulation runs until the 100th Generation
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the Vector in which to save the Results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the Simulation until Generation max_gen
for (i in 1:(max_gen + 1)) {
# redefine the current Population one Generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new Population Sizes to the Output Vector
pop_vector <- rbind(pop_vector,pop_new)
# Condition to stop the Simulation before max_gen: either the Population exceeds 1.5         Times the Original Population Size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# Define the Row and Column Names of the Output Vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # Note that the Vector has to be cut if the Simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the Result
return(pop_vector)
}
# Test the Function and plot the Result
# set max_gen to a Value to be used throughout
max_gen <- 1000
# create your Simulation Data
output <- simulate_pop(init_wd=50, init_wb=0,  init_sd=50, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.3, s_wm=0.1, s_sm=0.2, m_rate_wm=0.4, m_rate_sm=0.4,max_gen)
# show the last few Lines of the Data Table
print(tail(output))
# plot the Output - note that the Plot Range and the x Axis have to be adjusted based on the Length of the Table
# determine x axis Range
x_range <- 0:(length(output[,1])-1)
# this plots the total Population Size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add Number of wd Individuals
lines(x_range,output[,1], col="blue")
# add Number of wb Individuals
lines(x_range,output[,2], col="navyblue")
# add Number of sd Individuals
lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# Simulation runs until the 100th Generation
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the Vector in which to save the Results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the Simulation until Generation max_gen
for (i in 1:(max_gen + 1)) {
# redefine the current Population one Generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new Population Sizes to the Output Vector
pop_vector <- rbind(pop_vector,pop_new)
# Condition to stop the Simulation before max_gen: either the Population exceeds 1.5         Times the Original Population Size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# Define the Row and Column Names of the Output Vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # Note that the Vector has to be cut if the Simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the Result
return(pop_vector)
}
# Test the Function and plot the Result
# set max_gen to a Value to be used throughout
max_gen <- 1000
# create your Simulation Data
output <- simulate_pop(init_wd=50, init_wb=0,  init_sd=50, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.3, s_wm=0.1, s_sm=0.2, m_rate_wm=0.4, m_rate_sm=0.4,max_gen)
# show the last few Lines of the Data Table
print(tail(output))
# plot the Output - note that the Plot Range and the x Axis have to be adjusted based on the Length of the Table
# determine x axis Range
x_range <- 0:(length(output[,1])-1)
# this plots the total Population Size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add Number of wd Individuals
lines(x_range,output[,1], col="blue")
# add Number of wb Individuals
lines(x_range,output[,2], col="navyblue")
# add Number of sd Individuals
lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# Function for simulating one Generation in the Population
simulate_one_gen <- function(N_wd, N_wb, N_sd, N_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm) {
# draw Offspring according to Poisson Distribution
offsp_wd <- rpois(1, N_wd * (1-decay_rate_wm-s_wm))
offsp_wb <- rpois(1, N_wb * (1-decay_rate_wm+s_wm))
offsp_sd <- rpois(1, N_sd * (1-decay_rate_sm-s_sm))
offsp_sb <- rpois(1, N_sb * (1-decay_rate_sm+s_sm))
# draw changing Mutants according to Poisson Distribution
mut_wd_to_wb <- rpois(1, offsp_wd * m_rate_wm)
mut_sd_to_sb <- rpois(1, offsp_sd * m_rate_sm)
mut_wb_to_wd <- rpois(1, offsp_wb * m_rate_wm)
mut_sb_to_sd <- rpois(1, offsp_sb * m_rate_sm)
# determine new Population Sizes of all four Mutants (2 versions of weak Mutations   and 2   versions of strong Mutations)
N_wd_new <- max(offsp_wd - mut_wd_to_wb, 0)+(offsp_wd + mut_wb_to_wd)
N_wb_new <- max(offsp_wb - mut_wb_to_wd, 0)+(offsp_wb + mut_wd_to_wb)
N_sd_new <- max(offsp_sd - mut_sd_to_sb, 0)+(offsp_sd + mut_sb_to_sd)
N_sb_new <- max(offsp_sb - mut_sb_to_sd, 0)+(offsp_sb + mut_sd_to_sb)
return(c(N_wd_new, N_wb_new, N_sd_new, N_sb_new))
}
# Test the Function
print(simulate_one_gen(N_wd=50, N_wb=0, N_sd=50, N_sb=0, decay_rate_wm=0.1, decay_rate_sm=0.2, s_wm=0.2, s_sm=0.4, m_rate_wm=0.1, m_rate_sm=0.1))
# Simulation runs until the 100th Generation
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the Vector in which to save the Results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the Simulation until Generation max_gen
for (i in 1:(max_gen + 1)) {
# redefine the current Population one Generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new Population Sizes to the Output Vector
pop_vector <- rbind(pop_vector,pop_new)
# Condition to stop the Simulation before max_gen: either the Population exceeds 1.5         Times the Original Population Size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# Define the Row and Column Names of the Output Vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # Note that the Vector has to be cut if the Simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the Result
return(pop_vector)
}
# Test the Function and plot the Result
# set max_gen to a Value to be used througout
max_gen <- 1000
# create your Simulation Data
output <- simulate_pop(init_wd=1000, init_wb=0,  init_sd=1000, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.3, s_wm=0.2, s_sm=0.4, m_rate_wm=0.3, m_rate_sm=0.5,max_gen)
# show the last few Lines of the Data Table
print(tail(output))
# plot the Output - note that the Plot Range and the x Axis have to be adjusted based on the Length of the Table
# determine x axis Range
x_range <- 0:(length(output[,1])-1)
# this plots the total Population Size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add Number of wd Individuals
lines(x_range,output[,1], col="blue")
# add Number of wb Individuals
lines(x_range,output[,2], col="navyblue")
# add Number of sd Individuals
lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# set some Parameters to fixed Values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.4,0.5,0.6)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_wm in m_values_wm){
for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval_wm, mval_sm, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
# enter the D into the Table
data_table <- rbind(data_table,c(mval_wm,mval_sm,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
}
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","fred_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
print("frequency is ", freq_wb)
print("frequency is "+ freq_wb)
print("generations are =", max_gen)
print("generations are =", init_wd)
return("generations are =", init_wd)
print("generations are =" max_gen)
print(paste("generations are =", max_gen))
print(paste("hello")
print(paste("hello", max_gen)
print(paste("hello"))
print("hello")
# set some Parameters to fixed Values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.4,0.5,0.6)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_wm in m_values_wm){
for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval_wm, mval_sm, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
# enter the D into the Table
data_table <- rbind(data_table,c(mval_wm,mval_sm,sval_wm,sval_sm,N_end_wd, N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) breakprint
}
}
}
}
}
# set some Parameters to fixed Values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.4,0.5,0.6)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_wm in m_values_wm){
for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval_wm, mval_sm, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
# enter the D into the Table
data_table <- rbind(data_table,c(mval_wm,mval_sm,sval_wm,sval_sm,N_end_wd, N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
}
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
# Function for simulating one Generation in the Population
simulate_one_gen <- function(N_wd, N_wb, N_sd, N_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm) {
# draw Offspring according to Poisson Distribution
offsp_wd <- rpois(1, N_wd * (1-decay_rate_wm-s_wm))
offsp_wb <- rpois(1, N_wb * (1-decay_rate_wm+s_wm))
offsp_sd <- rpois(1, N_sd * (1-decay_rate_sm-s_sm))
offsp_sb <- rpois(1, N_sb * (1-decay_rate_sm+s_sm))
# draw changing Mutants according to Poisson Distribution
mut_wd_to_wb <- rpois(1, offsp_wd * m_rate_wm)
mut_sd_to_sb <- rpois(1, offsp_sd * m_rate_sm)
mut_wb_to_wd <- rpois(1, offsp_wb * m_rate_wm)
mut_sb_to_sd <- rpois(1, offsp_sb * m_rate_sm)
# determine new Population Sizes of all four Mutants (2 versions of weak Mutations   and 2   versions of strong Mutations)
N_wd_new <- max(offsp_wd - mut_wd_to_wb, 0)+(offsp_wd + mut_wb_to_wd)
N_wb_new <- max(offsp_wb - mut_wb_to_wd, 0)+(offsp_wb + mut_wd_to_wb)
N_sd_new <- max(offsp_sd - mut_sd_to_sb, 0)+(offsp_sd + mut_sb_to_sd)
N_sb_new <- max(offsp_sb - mut_sb_to_sd, 0)+(offsp_sb + mut_sd_to_sb)
return(c(N_wd_new, N_wb_new, N_sd_new, N_sb_new))
}
# Test the Function
print(simulate_one_gen(N_wd=50, N_wb=0, N_sd=50, N_sb=0, decay_rate_wm=0.1, decay_rate_sm=0.2, s_wm=0.2, s_sm=0.4, m_rate_wm=0.1, m_rate_sm=0.1))
# Simulation runs until the 100th Generation
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the Vector in which to save the Results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the Simulation until Generation max_gen
for (i in 1:(max_gen + 1)) {
# redefine the current Population one Generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new Population Sizes to the Output Vector
pop_vector <- rbind(pop_vector,pop_new)
# Condition to stop the Simulation before max_gen: either the Population exceeds 1.5         Times the Original Population Size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# Define the Row and Column Names of the Output Vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # Note that the Vector has to be cut if the Simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the Result
return(pop_vector)
}
# Test the Function and plot the Result
# set max_gen to a Value to be used througout
max_gen <- 1000
# create your Simulation Data
output <- simulate_pop(init_wd=1000, init_wb=0,  init_sd=1000, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.3, s_wm=0.2, s_sm=0.4, m_rate_wm=0.3, m_rate_sm=0.5,max_gen)
# show the last few Lines of the Data Table
print(tail(output))
# plot the Output - note that the Plot Range and the x Axis have to be adjusted based on the Length of the Table
# determine x axis Range
x_range <- 0:(length(output[,1])-1)
# this plots the total Population Size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add Number of wd Individuals
lines(x_range,output[,1], col="blue")
# add Number of wb Individuals
lines(x_range,output[,2], col="navyblue")
# add Number of sd Individuals
lines(x_range,output[,3], col="red")
# add Number of sb Individuals
lines(x_range,output[,4], col="darkred")
# add Legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# set some Parameters to fixed Values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 100
# set Parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.4,0.5,0.6)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
# run the Simulation across all chosen parameters
# loop over mutation rates
for(mval_wm in m_values_wm){
for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval_wm, mval_sm, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
# enter the D into the Table
data_table <- rbind(data_table,c(mval_wm,mval_sm,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
}
#Mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
