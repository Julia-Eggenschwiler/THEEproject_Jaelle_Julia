s_sm <- 0.8
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval in s_values_wm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm,         s_wm, s_sm, m_rate_wm, m_rate_sm,max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
simulate_one_gen <- function(N_wd, N_wb, N_sd, N_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm) {
# draw offspring according to Poisson distribution
offsp_wd <- rpois(1, N_wd * (1-decay_rate_wm-s_wm))
offsp_wb <- rpois(1, N_wb * (1-decay_rate_wm+s_wm))
offsp_sd <- rpois(1, N_sd * (1-decay_rate_sm-s_sm))
offsp_sb <- rpois(1, N_sb * (1-decay_rate_sm+s_sm))
# draw new mutants according to Poisson distribution
mut_wd_to_wb <- rpois(1, offsp_wd * m_rate_wm)
mut_sd_to_sb <- rpois(1, offsp_sd * m_rate_sm)
mut_wb_to_wd <- rpois(1, offsp_wb * m_rate_wm)
mut_sb_to_sd <- rpois(1, offsp_sb * m_rate_sm)
# determine new population sizes of wild type and mutant
N_wd_new <- max(offsp_wd - mut_wd_to_wb, 0)+(offsp_wd + mut_wb_to_wd)
N_wb_new <- max(offsp_wb - mut_wb_to_wd, 0)+(offsp_wb + mut_wd_to_wb)
N_sd_new <- max(offsp_sd - mut_sd_to_sb, 0)+(offsp_sd + mut_sb_to_sd)
N_sb_new <- max(offsp_sb - mut_sb_to_sd, 0)+(offsp_sb + mut_sd_to_sb)
return(c(N_wd_new, N_wb_new, N_sd_new, N_sb_new))
}
# Test the function
print(simulate_one_gen(N_wd=50, N_wb=0, N_sd=50, N_sb=0, decay_rate_wm=0.1, decay_rate_sm=0.2, s_wm=0.2, s_sm=0.4, m_rate_wm=0.1, m_rate_sm=0.1))
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the vector in which to save the results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the simulation until generation t_max
for (i in 1:(max_gen + 1)) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(init_wd=100, init_wb=0,  init_sd=100, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.4, s_wm=0.1, s_sm=0.2, m_rate_wm=0.1, m_rate_sm=0.1,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add number of wd individuals
lines(x_range,output[,1], col="blue")
# add number of wb individuals
lines(x_range,output[,2], col="navyblue")
# add number of sd individuals
lines(x_range,output[,3], col="red")
# add number of sb individuals
lines(x_range,output[,4], col="darkred")
# add legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.6
s_wm <- 0.2
s_sm <- 0.8
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval in s_values_wm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval, s_sm, mval, m_rate_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.8
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval in s_values_wm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval, s_sm, mval, m_rate_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval in s_values_wm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval, s_sm, mval, m_rate_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
# define column names of data table
colnames(data_table) <- c("m_rate","s","min_gen","no_min")
# show the first lines of the output
print(head(data_table))
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval, m_rate_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval_wm,sval_sm,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
# define column names of data table
colnames(data_table) <- c("m_rate","s","min_gen","no_min")
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval in m_values_wm){
# loop over selection coefficients
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval, m_rate_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval,sval_wm,sval_sm,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
# define column names of data table
colnames(data_table) <- c("m_rate","s_wm","s_sm","min_gen","no_min")
# show the first lines of the output
print(head(data_table))
# set some parameters to fixed values
init_wd <- 50
init_wb <- 0
init_sd <- 50
init_sb <- 0
m_rate_wm <- 0.001
m_rate_sm <- 0.001
decay_rate_wm <- 0.1
decay_rate_sm <- 0.3
s_wm <- 0.2
s_sm <- 0.4
max_gen <- 1000
# determine how often to run the simulation for each set of parameters
no_replicates <- 100
# set parameters to vary
s_values_wm <- c(0.2,0.3,0.4)
s_values_sm <- c(0.3,0.4,0.5)
m_values_wm <- c(0.01,0.05,0.1)
m_values_sm <- c(0.1,0.15,0.2)
# initialize data table - where to collect the results
data_table <- c()
# run the simulation across all chosen parameters
# loop over decay rates
for(mval_wm in m_values_wm){
for(mval_sm in m_values_sm){
# loop over selection coefficients
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different way of running many simulations: make replicates using "repeat" function with a        counter i
# reset counter
i<-1
repeat {
# increase counter by one
i<-i+1
# run the simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, mval_wm, mval_sm, max_gen)
# determine total population sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine minimum population size
min_size <- min(total_size)
# determine (first) generation at which this population size occurred
min_gen <- as.numeric(which(total_size==min_size)[1])
# enter the data into the table
data_table <- rbind(data_table,c(mval_wm,mval_sm,sval_wm,sval_sm,min_gen,min_size)) # note that we add the varying       parameters (decay rate and selection coefficient) to the table too
# stop the repeated computation after no_replicates times
if(i>no_replicates) break
}
}
}
}
}
# define column names of data table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","min_gen","no_min")
# show the first lines of the output
print(head(data_table))
print(tail(data_table))
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the vector in which to save the results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the simulation until generation t_max
for (i in 1:(max_gen + 1)) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(init_wd=100, init_wb=0,  init_sd=100, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.4, s_wm=0.1, s_sm=0.2, m_rate_wm=0.01, m_rate_sm=0.1,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add number of wd individuals
lines(x_range,output[,1], col="blue")
# add number of wb individuals
lines(x_range,output[,2], col="navyblue")
# add number of sd individuals
lines(x_range,output[,3], col="red")
# add number of sb individuals
lines(x_range,output[,4], col="darkred")
# add legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
max_gen=1000
simulate_pop <- function(init_wd, init_wb,  init_sd, init_sb, decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm, max_gen) {
# Create the vector in which to save the results
pop_vector <- c(init_wd,init_wb, init_sd, init_sb)
# initiate the variables
pop_new <- c(init_wd, init_wb, init_sd, init_sb)
# run the simulation until generation t_max
for (i in 1:(max_gen + 1)) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2],pop_new[3],pop_new[4], decay_rate_wm, decay_rate_sm, s_wm, s_sm, m_rate_wm, m_rate_sm)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if ((sum(pop_new) >= 10 * sum(c(init_wd, init_wb, init_sd, init_sb))) || sum(pop_new) == 0)
break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:max_gen)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("wd","wb", "sd", "sb")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(init_wd=100, init_wb=0,  init_sd=100, init_sb=0, decay_rate_wm=0.2, decay_rate_sm=0.4, s_wm=0.1, s_sm=0.4, m_rate_wm=0.01, m_rate_sm=0.1,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2]+output[ ,3]+output[ ,4],type='l',ylim=c(0,max(output[,1]+output[,2]+output[ ,3]+output[ ,4])),xlab =  "Generation",ylab = "Population size")
# add number of wd individuals
lines(x_range,output[,1], col="blue")
# add number of wb individuals
lines(x_range,output[,2], col="navyblue")
# add number of sd individuals
lines(x_range,output[,3], col="red")
# add number of sb individuals
lines(x_range,output[,4], col="darkred")
# add legend
legend("topleft",
legend=c("Weak deleterious","Weak beneficial","Strong deleterious","Strong beneficial"),
col=c("blue","navyblue","red","darkred"), lty=1, lwd=1.5)
