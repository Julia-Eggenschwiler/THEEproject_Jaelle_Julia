data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_wm = numeric(),
s_sm = numeric(),
replicate = integer(),
rescued = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.001,m_rate_sm=0.005, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# introduce rescue count
rescued_wd <- ifelse(one_run[nrow(one_run), "wd"] > 0, 1, 0)
rescued_wb <- ifelse(one_run[nrow(one_run), "wb"] > 0, 1, 0)
rescued_sd <- ifelse(one_run[nrow(one_run), "sd"] > 0, 1, 0)
rescued_sb <- ifelse(one_run[nrow(one_run), "sb"] > 0, 1, 0)
# save rescue outcome (rescue or extinction)
rescue_results <- rbind(rescue_results,
data.frame(
s_wm = sval_wm,
s_sm = sval_sm,
replicate = i - 1,
rescued_wd = rescued_wd,
rescued_wb = rescued_wb,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
)
)
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_table_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(m_rate_wm = 0.001,m_rate_sm = 0.005,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.001,m_rate_sm=0.005, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# introduce rescue count
rescued_wd <- ifelse(one_run[nrow(one_run), "wd"] > 0, 1, 0)
rescued_wb <- ifelse(one_run[nrow(one_run), "wb"] > 0, 1, 0)
rescued_sd <- ifelse(one_run[nrow(one_run), "sd"] > 0, 1, 0)
rescued_sb <- ifelse(one_run[nrow(one_run), "sb"] > 0, 1, 0)
# save rescue outcome (rescue or extinction)
rescue_results <- rbind(rescue_results,
data.frame(
s_wm = sval_wm,
s_sm = sval_sm,
replicate = i - 1,
rescued_wd = rescued_wd,
rescued_wb = rescued_wb,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
)
)
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_table_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(m_rate_wm = 0.001,m_rate_sm = 0.005,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# Make sure your data is a proper data frame
data_table_wd <- as.data.frame(data_table_wd)
# If the column names are missing or wrong, set them
colnames(data_table_wd) <- c("V1", "V2")
# Add an index column for plotting along x-axis
data_table_wd$Index <- 1:nrow(data_table_wd)
# calculate rescue probability per parametercombination
library(dplyr)
library(ggplot2)
library(tidyr)
rescue_summary <- rescue_results %>%
group_by(s_wm, s_sm) %>%
summarise(
rescue_prob_wd = mean(rescued_wd),
rescue_prob_wb = mean(rescued_wb),
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
print(rescue_summary)
# Daten vorbereiten
rescue_long <- rescue_summary %>%
pivot_longer(
cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob"
) %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant),
s_value = case_when(
mutant %in% c("wd", "wb") ~ s_wm,
mutant %in% c("sd", "sb") ~ s_sm
)
)
library(ggplot2)
ggplot(rescue_long, aes(x = factor(s_value), y = rescue_prob, fill = mutant)) +
geom_boxplot(alpha = 0.7) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c(
"wd" = "#77b5fe",
"wb" = "navyblue",
"sd" = "#D55E00",
"sb" = "darkred"
)) +
facet_wrap(~ mutant, scales = "free_x") +
labs(
title = "Rescue Probability per Mutant vs Relevant Selection Coefficient (Boxplot)",
x = "Relevant selection coefficient (s)",
y = "Rescue Probability",
fill = "Mutant"
) +
theme_minimal(base_size = 14)
0# optional: Mutantennamen sch√∂ner machen
rescue_long$mutant <- gsub("rescue_prob_", "", rescue_long$mutant)
# plotting wd with different s values
# making sure that its a data frame
data_table_wd <- as.data.frame(data_table_wd)
colnames(data_table_wd) <- c("V1", "V2")
# Scatterplot of wd with jitter and mean
library(ggplot2)
ggplot(data_table_wd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients",
y = "frequency",
color = "selection coefficient",
title = "Weak deleterious-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
# plotting wb with different s values
# making sure that its a data frame
data_table_wb <- as.data.frame(data_table_wb)
colnames(data_table_sb) <- c("V1", "V2")
# Scatterplot of wb with jitter and mean
ggplot(data_table_wb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selecton coefficients",
y = "frequency",
color = "selection coefficients",
title = "Weak beneficial-Means of frequencies of the different selection coefficientsn"
) +
theme_minimal()
# plotting sd with different s values
# making sure that its a data frame
data_table_sd <- as.data.frame(data_table_sd)
colnames(data_table_sd) <- c("V1", "V2")
# Scatterplot of sd with jitter and mean
ggplot(data_table_sd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients ",
y = "frequency",
color = "selection coefficients",
title = "Strong deletrious-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
data_table_sb <- as.data.frame(data_table_sb)
colnames(data_table_sb) <- c("V1", "V2")
# Scatterplot of sb with jitter and mean
ggplot(data_table_sb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients",
y = "frequency",
color = "selection coefficients",
title = "Strong beneficial-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
# mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# Scatterplot of wb with jitter and mean
ggplot(data_table_wb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selecton coefficients",
y = "frequency",
color = "selection coefficients",
title = "Weak beneficial-Means of frequencies of the different selection coefficientsn"
) +
theme_minimal()
# set some Parameters to fixed Values
init_wd <- 30
init_wb <- 30
init_sd <- 30
init_sb <- 30
m_rate_wm <- 0.001
m_rate_sm <- 0.005
decay_rate_wm <- 0.1
decay_rate_sm <- 0.2
s_wm <- 0.2
s_sm <- 0.3
max_gen <- 1000
# determine how often to run the Simulation for each set of Parameters
no_replicates <- 50
# set Parameters to vary
s_values_wm <- c(0.10,0.15,0.2)
s_values_sm <- c(0.25,0.30,0.35)
#m_values_wm <- c(0.001,0.01,0.05)
#m_values_sm <- c(0.05,0.1,0.15)
# initialize Data Table - where to collect the Results
data_table <- c()
data_table_wd<- c()
data_table_wb<- c()
data_table_sd<- c()
data_table_sb<- c()
# empty list to save rescue results
rescue_results <- data.frame(
s_wm = numeric(),
s_sm = numeric(),
replicate = integer(),
rescued = integer()
)
# define total runs and rescue count
total_runs<-0
rescue_count<-0
# run the Simulation across all chosen parameters
# loop over mutation rates
#for(mval_wm in m_values_wm){
# for(mval_sm in m_values_sm){
# loop over Selection strength
for(sval_wm in s_values_wm){
for(sval_sm in s_values_sm){
# different Way of running many Simulations: make Replicates using "repeat" Function         with a counter i
# reset Counter
i<-1
repeat {
# increase Counter by one
i<-i+1
# defining total runs
total_runs <- total_runs + 1
# run the Simulation once
one_run <- simulate_pop(init_wd, init_wb, init_sd, init_sb,
decay_rate_wm, decay_rate_sm,
sval_wm, sval_sm, m_rate_wm=0.001,m_rate_sm=0.005, max_gen)
# determine total Population Sizes
total_size <- one_run[,1]+one_run[,2]+one_run[,3]+one_run[,4]
# determine final Population Size for each Mutant
N_end_wd <- one_run[nrow(one_run), "wd"]
N_end_wb <- one_run[nrow(one_run), "wb"]
N_end_sd <- one_run[nrow(one_run), "sd"]
N_end_sb <- one_run[nrow(one_run), "sb"]
total_end <- N_end_wd + N_end_wb + N_end_sd + N_end_sb
# introduce rescue count
rescued_wd <- ifelse(one_run[nrow(one_run), "wd"] > 0, 1, 0)
rescued_wb <- ifelse(one_run[nrow(one_run), "wb"] > 0, 1, 0)
rescued_sd <- ifelse(one_run[nrow(one_run), "sd"] > 0, 1, 0)
rescued_sb <- ifelse(one_run[nrow(one_run), "sb"] > 0, 1, 0)
# save rescue outcome (rescue or extinction)
rescue_results <- rbind(rescue_results,
data.frame(
s_wm = sval_wm,
s_sm = sval_sm,
replicate = i - 1,
rescued_wd = rescued_wd,
rescued_wb = rescued_wb,
rescued_sd = rescued_sd,
rescued_sb = rescued_sb
)
)
# determine Frequencies of each mutant in the final Population
freq_wd <- ifelse(total_end > 0, N_end_wd / total_end, 0)
freq_wb <- ifelse(total_end > 0, N_end_wb / total_end, 0)
freq_sd <- ifelse(total_end > 0, N_end_sd / total_end, 0)
freq_sb <- ifelse(total_end > 0, N_end_sb / total_end, 0)
data_table_wd<- rbind(data_table_wd, c(sval_wm,freq_wd))
data_table_wb<- rbind(data_table_wb, c(sval_wm, freq_wb))
data_table_sd<- rbind(data_table_sd,c(sval_sm, freq_sd))
data_table_sb<-rbind(data_table_sb, c (sval_sm,freq_sb))
# enter the D into the Table
data_table <- rbind(data_table,c(m_rate_wm = 0.001,m_rate_sm = 0.005,sval_wm,sval_sm,N_end_wd,        N_end_wb, N_end_sd, N_end_sb,freq_wd, freq_wb, freq_sd,freq_sb)) # note that we add the                varying parameters (mutation rate and selection strength for each version of weak            and strong mutation) to the table too
# stop the repeated Computation after no_replicates times
if(i>no_replicates) break
}
}
}
#}
#}
# Make sure your data is a proper data frame
data_table_wd <- as.data.frame(data_table_wd)
# If the column names are missing or wrong, set them
colnames(data_table_wd) <- c("V1", "V2")
# Add an index column for plotting along x-axis
data_table_wd$Index <- 1:nrow(data_table_wd)
# calculate rescue probability per parametercombination
library(dplyr)
library(ggplot2)
library(tidyr)
rescue_summary <- rescue_results %>%
group_by(s_wm, s_sm) %>%
summarise(
rescue_prob_wd = mean(rescued_wd),
rescue_prob_wb = mean(rescued_wb),
rescue_prob_sd = mean(rescued_sd),
rescue_prob_sb = mean(rescued_sb),
.groups = "drop"
)
print(rescue_summary)
# Daten vorbereiten
rescue_long <- rescue_summary %>%
pivot_longer(
cols = starts_with("rescue_prob_"),
names_to = "mutant",
values_to = "rescue_prob"
) %>%
mutate(
mutant = gsub("rescue_prob_", "", mutant),
s_value = case_when(
mutant %in% c("wd", "wb") ~ s_wm,
mutant %in% c("sd", "sb") ~ s_sm
)
)
library(ggplot2)
ggplot(rescue_long, aes(x = factor(s_value), y = rescue_prob, fill = mutant)) +
geom_boxplot(alpha = 0.7) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c(
"wd" = "#77b5fe",
"wb" = "navyblue",
"sd" = "#D55E00",
"sb" = "darkred"
)) +
facet_wrap(~ mutant, scales = "free_x") +
labs(
title = "Rescue Probability per Mutant vs Relevant Selection Coefficient (Boxplot)",
x = "Relevant selection coefficient (s)",
y = "Rescue Probability",
fill = "Mutant"
) +
theme_minimal(base_size = 14)
ggplot(rescue_long, aes(x = s_value, y = rescue_prob, color = mutant)) +
geom_jitter(width = 0.01, height = 0, size = 3, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c(
"wd" = "#77b5fe",
"wb" = "navyblue",
"sd" = "#D55E00",
"sb" = "darkred"
)) +
facet_wrap(~ mutant, scales = "free_x") +
labs(
title = "Rescue Probability per Mutant vs Relevant Selection Coefficient (Scatterplot)",
x = "Relevant selection coefficient (s)",
y = "Rescue Probability",
color = "Mutant"
) +
theme_minimal(base_size = 14)
0# optional: Mutantennamen sch√∂ner machen
rescue_long$mutant <- gsub("rescue_prob_", "", rescue_long$mutant)
# plotting wd with different s values
# making sure that its a data frame
data_table_wd <- as.data.frame(data_table_wd)
colnames(data_table_wd) <- c("V1", "V2")
# Scatterplot of wd with jitter and mean
library(ggplot2)
ggplot(data_table_wd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients",
y = "frequency",
color = "selection coefficient",
title = "Weak deleterious-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
# plotting wb with different s values
# making sure that its a data frame
data_table_wb <- as.data.frame(data_table_wb)
colnames(data_table_sb) <- c("V1", "V2")
# Scatterplot of wb with jitter and mean
ggplot(data_table_wb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selecton coefficients",
y = "frequency",
color = "selection coefficients",
title = "Weak beneficial-Means of frequencies of the different selection coefficientsn"
) +
theme_minimal()
# plotting sd with different s values
# making sure that its a data frame
data_table_sd <- as.data.frame(data_table_sd)
colnames(data_table_sd) <- c("V1", "V2")
# Scatterplot of sd with jitter and mean
ggplot(data_table_sd, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients ",
y = "frequency",
color = "selection coefficients",
title = "Strong deletrious-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
# plotting sb with different s values
# making sure that its a data frame
data_table_sb <- as.data.frame(data_table_sb)
colnames(data_table_sb) <- c("V1", "V2")
# Scatterplot of sb with jitter and mean
ggplot(data_table_sb, aes(x = factor(V1), y = V2, color = factor(V1))) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "black") +
labs(
x = "selection coefficients",
y = "frequency",
color = "selection coefficients",
title = "Strong beneficial-Means of frequencies of the different selection coefficients"
) +
theme_minimal()
# mean Frequencies of each mutant
mean_freq_wd <- mean(freq_wd)*100
mean_freq_wb <- mean(freq_wb)*100
mean_freq_sd <- mean(freq_sd)*100
mean_freq_sb <- mean(freq_sb)*100
print(paste("Mean frequency of wd =", mean_freq_wd) )
print(paste("Mean frequency of wb =", mean_freq_wb) )
print(paste("Mean frequency of sd =", mean_freq_sd) )
print(paste("Mean frequency of sb =", mean_freq_sb) )
# define Column Names of Data Table
colnames(data_table) <- c("m_rate_wm","m_rate_sm","s_wm","s_sm","N_end_wd", "N_end_wb", "N_end_sd", "N_end_sb","freq_wd", "freq_wb", "freq_sd","freq_sb")
# show the first and last Lines of the Output
print(head(data_table))
print(tail(data_table))
